<project name="CommandBook" default="dist" basedir=".">
  <description>CommandBook contains core commands for Bukkit.</description>
  
  <property name="src.dir" location="src"/>
  <property name="build.dir" location="build"/>
  <property name="dist.dir" location="dist"/>
  <property name="release.dir" location="release"/>
  <property name="lib.dir" location="lib"/>
  <property name="docs.dir" location="docs"/>

  <fileset id="libs" dir="${lib.dir}">
    <include name="Bukkit.jar" />
    <include name="Craftbukkit.jar" />
    <include name="WorldEdit.jar" />
  </fileset>

  <target name="init">
    <mkdir dir="${build.dir}"/>
  </target>

  <!-- Compile the source files -->
  <target name="compile" depends="init">
    <javac srcdir="${src.dir}" deprecation="true" includeantruntime="true" destdir="${build.dir}" debug="true">
      <classpath>
        <fileset refid="libs"/>
      </classpath>
    </javac>
  </target>

  <!-- Build the .jar -->
  <target name="jar" depends="compile">
    <mkdir dir="${dist.dir}"/>
    <manifest file="manifest.mf" mode="replace">
      <attribute name="Implementation-Title" value="CommandBook"/>
      <attribute name="Implementation-Version" value="${version}"/>
      <attribute name="CommandBook-Version" value="${version}"/>
      <attribute name="Class-Path" value="WorldEdit.jar CommandBook/WorldEdit.jar lib/WorldEdit.jar ../lib/WorldEdit.jar ../WorldEdit.jar"/>
    </manifest>
    <delete file="${build.dir}/plugin.yml"/>
    <copy tofile="${build.dir}/plugin.yml" file="plugin.yml"/>
    <replace file="${build.dir}/plugin.yml" token="__VERSION_MACRO__" value="${version}"/>
    <mkdir dir="${build.dir}/defaults"/>
    <copy tofile="${build.dir}/defaults/config.yml" file="config.yml"/>
    <copy tofile="${build.dir}/defaults/kits.txt" file="kits.txt"/>
    <jar jarfile="${dist.dir}/CommandBook.jar" basedir="${build.dir}" manifest="manifest.mf">
    </jar>
  </target>

  <!-- Create the .jar -->
  <target name="dist">
    <property name="version" value="nightly"/>
    <antcall target="jar"/>
  </target>

  <!-- Build a release -->
  <target name="release" depends="clean">
    <input message="Enter version:" addproperty="version"/>
    <antcall target="jar"/>
    <delete dir="${release.dir}"/>
    <mkdir dir="${release.dir}"/>
    <copy tofile="${release.dir}/README.txt" file="README.txt"/>
    <copy tofile="${release.dir}/LICENSE.txt" file="LICENSE.txt"/>
    <copy tofile="${release.dir}/CHANGELOG.txt" file="CHANGELOG.txt"/>
    <copy tofile="${release.dir}/CommandBook.jar" file="${dist.dir}/CommandBook.jar"/>
    <zip destfile="${release.dir}/commandbook-${version}.zip" basedir="${release.dir}" excludes="*.zip plugin.yml"/>
    <mkdir dir="${release.dir}/src"/>
    <copy todir="${release.dir}/src">
      <fileset dir="${src.dir}"/>
    </copy>
    <zip destfile="${release.dir}/commandbook-${version}-src.zip" basedir="${release.dir}" excludes="*.zip plugin.yml"/>
  </target>

  <!-- Javadoc -->
  <target name="javadoc">
    <javadoc access="public" author="true" destdir="${docs.dir}" doctitle="CommandBook API" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" source="1.6" sourcepath="src" splitindex="true" use="true" version="true">
      <classpath>
        <fileset refid="libs"/>
      </classpath>
    </javadoc>
  </target>
  
  <!-- Clean the output -->
  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${release.dir}"/>
    <delete dir="${docs.dir}"/>
  </target>
  
  <!--<target name="-get-version-git" if="git-revision">
    <sequential>
      <exec executable="git" failifexecutionfails="false" outputproperty="git-revision">
        <arg value="rev-parse"/>
        <arg value="HEAD"/>
      </exec>
      <exec executable="git" outputproperty="git-revision-dirty">
        <arg value="diff"/>
        <arg value="- -shortstat"/>
      </exec>
      <condition else="dev-${git-revision}-modified" property="version" value="dev-${git-revision}">
        <equals arg1="" arg2="${git-revision-dirty}"/>
      </condition>
    </sequential>
  </target>-->
</project>
